# /qompassai/network/nftables/nftables.conf
# Qompass AI NFTables Template Config
# Copyright (C) 2025 Qompass AI, All rights reserved
#################################################### 
table inet my_filter {
	chain input {
		type filter hook input priority filter; policy drop;
		ct state established,related accept
		iif "lo" accept
		icmpv6 type { mld-listener-query, nd-router-solicit, nd-neighbor-solicit, nd-neighbor-advert } accept
		icmpv6 type echo-request limit rate 10/second burst 5 packets accept
		ip protocol icmp accept
		udp dport 51820 accept
		tcp dport { 22, 80, 389, 443, 636, 2375, 2376, 3000, 9001, 9030, 9050, 9051, 11371, 13340, 13342 } accept
		ct state invalid drop
		ct state established,related accept
		iif "lo" accept
		icmpv6 type { mld-listener-query, nd-router-solicit, nd-neighbor-solicit, nd-neighbor-advert } accept
		icmpv6 type echo-request limit rate 10/second burst 5 packets accept
		ip protocol icmp accept
		udp dport 51820 accept
		tcp dport { 22, 80, 389, 443, 636, 2375, 2376, 3000, 9001, 9030, 9050, 9051, 11371, 13340, 13342 } accept
		ct state invalid drop
	}
	chain forward {
		type filter hook forward priority filter; policy drop;
		iifname "wg0" oifname "enp45s0" accept
		iifname "enp45s0" oifname "wg0" accept
		iifname "wg0" oifname "enp45s0" accept
		iifname "enp45s0" oifname "wg0" accept
	}
	chain output {
		type filter hook output priority filter; policy accept;
	}
}
table inet nat {
	chain postrouting {
		type nat hook postrouting priority srcnat; policy accept;
		oifname "enp45s0" masquerade
		oifname "enp45s0" masquerade
	}
}
table ip6 nat {
	chain postrouting {
		type nat hook postrouting priority srcnat; policy accept;
		oifname "enp45s0" masquerade
		oifname "enp45s0" masquerade
	}

	chain DOCKER {
	}
	chain PREROUTING {
		type nat hook prerouting priority dstnat; policy accept;
		xt match "addrtype" counter packets 0 bytes 0 jump DOCKER
	}
	chain OUTPUT {
		type nat hook output priority dstnat; policy accept;
		ip6 daddr != ::1 xt match "addrtype" counter packets 0 bytes 0 jump DOCKER
	}
}
table ip nat {
	chain DOCKER {
		iifname "docker0" counter packets 0 bytes 0 return
	}

	chain PREROUTING {
		type nat hook prerouting priority dstnat; policy accept;
		xt match "addrtype" counter packets 3731 bytes 1574429 jump DOCKER
	}
	chain OUTPUT {
		type nat hook output priority dstnat; policy accept;
		ip daddr != 127.0.0.0/8 xt match "addrtype" counter packets 204 bytes 20952 jump DOCKER
	}
	chain POSTROUTING {
		type nat hook postrouting priority srcnat; policy accept;
		ip saddr 172.17.0.0/16 oifname != "docker0" counter packets 22123 bytes 1982956 xt target "MASQUERADE"
	}
}
table ip filter {
	chain DOCKER {
		iifname != "docker0" oifname "docker0" counter packets 0 bytes 0 drop
	}

	chain DOCKER-FORWARD {
		counter packets 0 bytes 0 jump DOCKER-CT
		counter packets 0 bytes 0 jump DOCKER-ISOLATION-STAGE-1
		counter packets 0 bytes 0 jump DOCKER-BRIDGE
		iifname "docker0" counter packets 0 bytes 0 accept
	}
	chain DOCKER-BRIDGE {
		oifname "docker0" counter packets 0 bytes 0 jump DOCKER
	}
	chain DOCKER-CT {
		oifname "docker0" xt match "conntrack" counter packets 0 bytes 0 accept
	}
	chain DOCKER-ISOLATION-STAGE-1 {
		iifname "docker0" oifname != "docker0" counter packets 0 bytes 0 jump DOCKER-ISOLATION-STAGE-2
	}
	chain DOCKER-ISOLATION-STAGE-2 {
		oifname "docker0" counter packets 0 bytes 0 drop
	}
	chain FORWARD {
		type filter hook forward priority filter; policy accept;
		counter packets 0 bytes 0 jump DOCKER-USER
		counter packets 0 bytes 0 jump DOCKER-FORWARD
	}
	chain DOCKER-USER {
		counter packets 0 bytes 0 return
	}
}
table ip6 filter {
	chain DOCKER {
	}

	chain DOCKER-FORWARD {
		counter packets 0 bytes 0 jump DOCKER-CT
		counter packets 0 bytes 0 jump DOCKER-ISOLATION-STAGE-1
		counter packets 0 bytes 0 jump DOCKER-BRIDGE
	}
	chain DOCKER-BRIDGE {
	}

	chain DOCKER-CT {
	}

	chain DOCKER-ISOLATION-STAGE-1 {
	}

	chain DOCKER-ISOLATION-STAGE-2 {
	}

	chain FORWARD {
		type filter hook forward priority filter; policy accept;
		counter packets 0 bytes 0 jump DOCKER-USER
		counter packets 0 bytes 0 jump DOCKER-FORWARD
	}

	chain DOCKER-USER {
		counter packets 0 bytes 0 return
	}
}
table inet monero {
	chain input {
		type filter hook input priority filter; policy accept;
		tcp dport 18080 accept
		tcp dport 18081 accept
		iif "lo" accept
		ct state established,related accept
	}

	chain output {
		type filter hook output priority filter; policy accept;
		tcp dport { 3333, 10028, 10128 } accept
		oif "lo" accept
		ct state established,related accept
	}
}
